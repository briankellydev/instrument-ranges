{"version":3,"sources":["components/List-Selection/List-Selection.tsx","components/List/List.tsx","components/InstrumentDetails/InstrumentDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListSelection","className","this","props","active","name","React","Component","List","listItems","map","listItem","index","key","onClick","itemSelected","activeItem","InstrumentDetails","instrument","src","imgUrl","rangeBottom","rangeTop","axios","require","default","InitialState","families","lists","instrumentDisplayed","selectedInstrument","selectedFamily","instruments","App","state","get","then","resp","setState","data","selectFamily","bind","family","renderLists","inst","chooseInstrument","find","filterInstruments","selectInstrument","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc6e5026.chunk.js","sourcesContent":["import React from 'react';\nimport './List-Selection.scss';\n\nexport class ListSelection extends React.Component<{name: string, active: boolean}> {\n    render() {\n        return (\n            <div className={`ListSelection${this.props.active ? ' active' : ''}`}>\n                {this.props.name}\n                <i className=\"fa fa-caret-right\"></i>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport './List.scss';\nimport { ListSelection } from '../List-Selection/List-Selection';\n\ninterface ListProps {\n    name: string,\n    listItems: string[],\n    itemSelected: any,\n    activeItem: string,\n}\n\nexport class List extends React.Component<ListProps> {\n    render() {\n        return (\n            <div className=\"List\">\n                <h2>{this.props.name}</h2>\n                {this.props.listItems.map((listItem: string, index: number) => {\n                    return (\n                        <div key={index} onClick={() => this.props.itemSelected(listItem)}>\n                            <ListSelection name={listItem} active={this.props.activeItem === listItem}/>\n                        </div>\n                    \n                    )\n                })}\n            </div>\n        );\n    }\n};","import React from 'react';\nimport './InstrumentDetails.scss';\nimport { Instrument } from '../../interfaces/Instrument';\n\nexport class InstrumentDetails extends React.Component<{instrument: Instrument}> {\n    render() {\n        return (\n            <div className=\"Instrument\">\n                <h2>{this.props.instrument.name}</h2>\n                <div>\n                    <img src={this.props.instrument.imgUrl}/>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <div className=\"bold\">Key</div> {this.props.instrument.key}\n                    </div>\n                    <div className=\"col-6\">\n                    <div className=\"bold\">Range (written)</div> {this.props.instrument.rangeBottom}-{this.props.instrument.rangeTop}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.scss';\nimport { List } from './components/List/List';\nimport { Instrument } from './interfaces/Instrument';\nimport { InstrumentDetails } from './components/InstrumentDetails/InstrumentDetails';\nconst axios = require('axios').default;\n\ninterface AppState {\n  families: string[];\n  lists: React.ClassicElement<typeof List>[];\n  instrumentDisplayed: React.ClassicElement<typeof InstrumentDetails>[];\n  selectedInstrument: string;\n  selectedFamily: string;\n  instruments: Instrument[];\n}\n\nconst InitialState: AppState = {\n  families: [],\n  lists: [],\n  instrumentDisplayed: [],\n  selectedInstrument: '',\n  selectedFamily: '',\n  instruments: []\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = InitialState;\n\n  constructor() {\n    super(InitialState, {});\n    axios.get('/api/families').then((resp: {data: string[]}) => {\n      this.setState({\n        families: resp.data,\n        lists: [(\n        <div key=\"0\" className=\"col-3\">\n          <List\n            name=\"Families\"\n            listItems={resp.data}\n            activeItem={this.state.selectedFamily}\n            itemSelected={this.selectFamily.bind(this)}\n          />\n        </div>)]\n      });\n    });\n  }\n\n  render() {\n    return (<div className=\"App\">\n      <header>\n        <h1>Common Instrument Ranges</h1>\n      </header>\n      <div className=\"AppBody\">\n        <div className=\"row\">\n          {this.state.lists}\n          <div className=\"col-6\" key=\"2\">\n            {this.state.instrumentDisplayed}\n          </div>\n        </div>\n      </div>\n      \n    </div>\n    );\n  }\n\n  private selectFamily(family: string) {\n    axios.get(`/api/instruments/?family=${family}`).then((resp: {data: Instrument[]}) => {\n      this.setState({\n        instrumentDisplayed: [],\n        selectedInstrument: '',\n        selectedFamily: family,\n        instruments: resp.data\n      });\n      this.renderLists(family, '');\n    });\n    \n  }\n\n  private selectInstrument(inst: string) {\n    this.setState({\n      instrumentDisplayed: [(\n        <InstrumentDetails instrument={this.chooseInstrument(inst)} />\n      )],\n      selectedInstrument: inst\n    });\n    this.renderLists(this.state.selectedFamily, inst);\n  }\n\n  private filterInstruments(instruments: Instrument[]) {\n    return instruments.map((instrument: Instrument) => {\n      return instrument.name;\n    });\n  }\n\n  private chooseInstrument(instrument: string) {\n    const inst = this.state.instruments.find((inst: Instrument) => {\n      return inst.name === instrument;\n    });\n    const blankInst: Instrument = {\n      name: '',\n      key: '',\n      imgUrl: '',\n      family: '',\n      rangeTop: '',\n      rangeBottom: ''\n    }\n    return inst  || blankInst;\n  }\n\n  private renderLists(family: string, instrument: string) {\n    this.setState({\n      lists: [\n        (\n          <div key=\"0\" className=\"col-3\">\n            <List\n              name=\"Families\"\n              listItems={this.state.families}\n              activeItem={family}\n              itemSelected={this.selectFamily.bind(this)}\n            />\n          </div>\n        ),\n        (\n          <div key=\"1\" className=\"col-3\">\n            <List\n              name=\"Instruments\"\n              listItems={this.filterInstruments(this.state.instruments)}\n              activeItem={instrument}\n              itemSelected={this.selectInstrument.bind(this)}\n            />\n          </div>\n        ),\n      ]\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}